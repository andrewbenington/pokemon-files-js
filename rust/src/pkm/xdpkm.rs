// This file was generated by make generate
use crate::pkm::{util, strings};
use crate::pkm::types::Stats;
use crate::pkm::util::to_sized_array;
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct XDPKM {
  dex_num: u16,
  held_item_index: u16,
  current_hp: u16,
  trainer_friendship: u16,
  met_location_index: u16,
  met_level: u8,
  ball: u8,
  trainer_gender: bool,
  stat_level: u8,
  pokerus_byte: u8,
  is_egg: bool,
  exp: u32,
  secret_id: u16,
  trainer_id: u16,
  personality_value: u32,
  is_fateful_encounter: bool,
  game_of_origin: u8,
  language_index: u8,
  trainer_name: String,
  nickname: String,
  moves: [u16; 4],
  move_pp: [u8; 4],
  move_pp_ups: [u8; 4],
  evs: Stats,
  ivs: Stats,
  shadow_id: u16,
}

impl XDPKM {
  pub fn from_bytes(bytes: Vec<u8>) -> Result<Self, Box<dyn std::error::Error>> {
	let dex_num = u16::from_be_bytes(to_sized_array(&bytes[0..2]));
	let held_item_index = u16::from_be_bytes(to_sized_array(&bytes[2..4]));
	let current_hp = u16::from_be_bytes(to_sized_array(&bytes[4..6]));
	let trainer_friendship = u16::from_be_bytes(to_sized_array(&bytes[6..8]));
	let met_location_index = u16::from_be_bytes(to_sized_array(&bytes[8..10]));
	let met_level = bytes[14];
	let ball = bytes[15];
	let trainer_gender = util::get_flag(&bytes, 16, 1).map_err(|e| format!("read field 'trainer_gender': {}", e))?;
	let stat_level = bytes[17];
	let pokerus_byte = bytes[19];
	let is_egg = util::get_flag(&bytes, 29, 7).map_err(|e| format!("read field 'is_egg': {}", e))?;
	let exp = u32::from_be_bytes(to_sized_array(&bytes[32..36]));
	let secret_id = u16::from_be_bytes(to_sized_array(&bytes[36..38]));
	let trainer_id = u16::from_be_bytes(to_sized_array(&bytes[38..40]));
	let personality_value = u32::from_be_bytes(to_sized_array(&bytes[40..44]));
	let is_fateful_encounter = util::get_flag(&bytes, 51, 0).map_err(|e| format!("read field 'is_fateful_encounter': {}", e))?;
	let game_of_origin = bytes[52];
	let language_index = bytes[55];
	let trainer_name = strings::utf16_be_from_bytes(bytes[56..78].to_vec()).map_err(|e| format!("read field 'trainer_name': {}", e))?;
	let nickname = strings::utf16_be_from_bytes(bytes[78..100].to_vec()).map_err(|e| format!("read field 'nickname': {}", e))?;
	let moves = [u16::from_be_bytes(to_sized_array(&bytes[128..130])), u16::from_be_bytes(to_sized_array(&bytes[130..132])), u16::from_be_bytes(to_sized_array(&bytes[132..134])), u16::from_be_bytes(to_sized_array(&bytes[134..136]))];
	let move_pp = [bytes[130], bytes[131], bytes[132], bytes[133]];
	let move_pp_ups = [bytes[131], bytes[132], bytes[133], bytes[134]];
	let evs = Stats::from_bytes(to_sized_array(&bytes[157..163]));
	let ivs = Stats::from_bytes(to_sized_array(&bytes[169..175]));
	let shadow_id = u16::from_be_bytes(to_sized_array(&bytes[186..188]));
    let mon = XDPKM {
        dex_num,
        held_item_index,
        current_hp,
        trainer_friendship,
        met_location_index,
        met_level,
        ball,
        trainer_gender,
        stat_level,
        pokerus_byte,
        is_egg,
        exp,
        secret_id,
        trainer_id,
        personality_value,
        is_fateful_encounter,
        game_of_origin,
        language_index,
        trainer_name,
        nickname,
        moves,
        move_pp,
        move_pp_ups,
        evs,
        ivs,
        shadow_id,
    };
	return Ok(mon);
  }
}
