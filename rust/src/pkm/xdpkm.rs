// This file was generated by make generate
use super::pkm::Pkm;
use crate::pkm::types::{Gender, Stats};
use crate::pkm::util::to_sized_array;
use crate::pkm::{strings, util};
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct XDPKM {
    pub dex_num: u16,
    pub held_item_index: u16,
    pub current_hp: u16,
    pub trainer_friendship: u16,
    pub met_location_index: u16,
    pub met_level: u8,
    pub ball: u8,
    pub trainer_gender: Gender,
    pub stat_level: u8,
    pub pokerus_byte: u8,
    pub is_egg: bool,
    pub exp: u32,
    pub secret_id: u16,
    pub trainer_id: u16,
    pub personality_value: u32,
    pub is_fateful_encounter: bool,
    pub game_of_origin: u8,
    pub language_index: u8,
    pub trainer_name: String,
    pub nickname: String,
    pub moves: [u16; 4],
    pub move_pp: [u8; 4],
    pub move_pp_ups: [u8; 4],
    pub evs: Stats,
    pub ivs: Stats,
    pub shadow_id: u16,
}

impl Pkm<196, 196> for XDPKM {
    const BOX_SIZE: usize = 196;
    const PARTY_SIZE: usize = 196;

    fn from_bytes(bytes: &[u8]) -> Result<Self, String> {
        let size = bytes.len();
        if size < 196 {
            return Err(format!(
                "byte array is too short for XDPKM format (received {size}, expected >= 196)"
            ));
        }
        let mon = XDPKM {
            dex_num: u16::from_be_bytes(to_sized_array(&bytes[0..2])),
            held_item_index: u16::from_be_bytes(to_sized_array(&bytes[2..4])),
            current_hp: u16::from_be_bytes(to_sized_array(&bytes[4..6])),
            trainer_friendship: u16::from_be_bytes(to_sized_array(&bytes[6..8])),
            met_location_index: u16::from_be_bytes(to_sized_array(&bytes[8..10])),
            met_level: bytes[14],
            ball: bytes[15],
            trainer_gender: util::get_flag(bytes, 16, 1).into(),
            stat_level: bytes[17],
            pokerus_byte: bytes[19],
            is_egg: util::get_flag(bytes, 29, 7),
            exp: u32::from_be_bytes(to_sized_array(&bytes[32..36])),
            secret_id: u16::from_be_bytes(to_sized_array(&bytes[36..38])),
            trainer_id: u16::from_be_bytes(to_sized_array(&bytes[38..40])),
            personality_value: u32::from_be_bytes(to_sized_array(&bytes[40..44])),
            is_fateful_encounter: util::get_flag(bytes, 51, 0),
            game_of_origin: bytes[52],
            language_index: bytes[55],
            trainer_name: strings::utf16::from_be_bytes(bytes[56..78].to_vec()),
            nickname: strings::utf16::from_be_bytes(bytes[78..100].to_vec()),
            moves: [
                u16::from_be_bytes(to_sized_array(&bytes[128..130])),
                u16::from_be_bytes(to_sized_array(&bytes[130..132])),
                u16::from_be_bytes(to_sized_array(&bytes[132..134])),
                u16::from_be_bytes(to_sized_array(&bytes[134..136])),
            ],
            move_pp: [bytes[130], bytes[131], bytes[132], bytes[133]],
            move_pp_ups: [bytes[131], bytes[132], bytes[133], bytes[134]],
            evs: Stats::from_bytes(to_sized_array(&bytes[157..163])),
            ivs: Stats::from_bytes(to_sized_array(&bytes[169..175])),
            shadow_id: u16::from_be_bytes(to_sized_array(&bytes[186..188])),
        };
        Ok(mon)
    }

    fn write_bytes(&self, bytes: &mut [u8; 196]) {
        bytes[0..2].copy_from_slice(&self.dex_num.to_be_bytes());
        bytes[2..4].copy_from_slice(&self.held_item_index.to_be_bytes());
        bytes[4..6].copy_from_slice(&self.current_hp.to_be_bytes());
        bytes[6..8].copy_from_slice(&self.trainer_friendship.to_be_bytes());
        bytes[8..10].copy_from_slice(&self.met_location_index.to_be_bytes());
        bytes[14] = self.met_level;
        bytes[15] = self.ball;

        bytes[17] = self.stat_level;
        bytes[19] = self.pokerus_byte;

        bytes[32..36].copy_from_slice(&self.exp.to_be_bytes());
        bytes[36..38].copy_from_slice(&self.secret_id.to_be_bytes());
        bytes[38..40].copy_from_slice(&self.trainer_id.to_be_bytes());
        bytes[40..44].copy_from_slice(&self.personality_value.to_be_bytes());

        bytes[52] = self.game_of_origin;
        bytes[55] = self.language_index;
        bytes[56..67].copy_from_slice(&strings::utf16::to_be_bytes(&self.trainer_name));
        bytes[78..89].copy_from_slice(&strings::utf16::to_be_bytes(&self.nickname));

        bytes[186..188].copy_from_slice(&self.shadow_id.to_be_bytes());
    }

    fn to_box_bytes(&self) -> [u8; 196] {
        let mut bytes = [0; 196];
        self.write_bytes(&mut bytes);

        bytes
    }

    fn to_party_bytes(&self) -> [u8; 196] {
        let mut bytes = [0; 196];
        let box_slice: &mut [u8; 196] = bytes[0..196].as_mut().try_into().unwrap();
        self.write_bytes(box_slice);

        bytes
    }
}
