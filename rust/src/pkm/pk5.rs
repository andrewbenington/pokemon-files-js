// This file was generated by make generate
use crate::pkm::{util, strings};
use crate::pkm::types::Stats;
use crate::pkm::util::to_sized_array;
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct PK5 {
  personality_value: u32,
  dex_num: u16,
  held_item_index: u16,
  trainer_id: u16,
  secret_id: u16,
  exp: u32,
  trainer_friendship: u8,
  ability_index: u8,
  language_index: u8,
  evs: Stats,
  moves: [u16; 4],
  move_pp: [u8; 4],
  move_pp_ups: [u8; 4],
  ivs: Stats,
  is_egg: bool,
  is_nicknamed: bool,
  gender: u8,
  forme_num: u8,
  nature: u8,
  is_ns_pokemon: bool,
  ribbon_bytes: [u8; 4],
  game_of_origin: u8,
  egg_location_index: u16,
  met_location_index: u16,
  pokerus_byte: u8,
  ball: u8,
  met_level: u8,
  encounter_type: u8,
  poke_star_fame: u8,
  status_condition: u8,
  current_hp: u8,
  is_fateful_encounter: bool,
  nickname: String,
  trainer_name: String,
  trainer_gender: bool,
  checksum: u16,
}

impl PK5 {
  pub fn from_bytes(bytes: Vec<u8>) -> Result<Self, Box<dyn std::error::Error>> {
	let personality_value = u32::from_le_bytes(to_sized_array(&bytes[0..4]));
	let dex_num = u16::from_le_bytes(to_sized_array(&bytes[8..10]));
	let held_item_index = u16::from_le_bytes(to_sized_array(&bytes[10..12]));
	let trainer_id = u16::from_le_bytes(to_sized_array(&bytes[12..14]));
	let secret_id = u16::from_le_bytes(to_sized_array(&bytes[14..16]));
	let exp = u32::from_le_bytes(to_sized_array(&bytes[16..20]));
	let trainer_friendship = bytes[20];
	let ability_index = bytes[21];
	let language_index = bytes[23];
	let evs = Stats::from_bytes(to_sized_array(&bytes[24..30]));
	let moves = [u16::from_le_bytes(to_sized_array(&bytes[40..42])), u16::from_le_bytes(to_sized_array(&bytes[42..44])), u16::from_le_bytes(to_sized_array(&bytes[44..46])), u16::from_le_bytes(to_sized_array(&bytes[46..48]))];
	let move_pp = [bytes[48], bytes[49], bytes[50], bytes[51]];
	let move_pp_ups = [bytes[52], bytes[53], bytes[54], bytes[55]];
	let ivs = Stats::from_30_bits(to_sized_array(&bytes[56..60]));
	let is_egg = util::get_flag(&bytes, 56, 30).map_err(|e| format!("read field 'is_egg': {}", e))?;
	let is_nicknamed = util::get_flag(&bytes, 56, 31).map_err(|e| format!("read field 'is_nicknamed': {}", e))?;
	let gender = byteLogic.uIntFromBufferBits(dataView, 0x40, 1, 2, true);
	let forme_num = byteLogic.uIntFromBufferBits(dataView, 0x40, 3, 5, true);
	let nature = bytes[65];
	let is_ns_pokemon = util::get_flag(&bytes, 66, 1).map_err(|e| format!("read field 'is_ns_pokemon': {}", e))?;
	let ribbon_bytes = to_sized_array(&bytes[76..80]);
	let game_of_origin = bytes[95];
	let egg_location_index = u16::from_le_bytes(to_sized_array(&bytes[126..128]));
	let met_location_index = u16::from_le_bytes(to_sized_array(&bytes[128..130]));
	let pokerus_byte = bytes[130];
	let ball = bytes[131];
	let met_level = bytes[132];
	let encounter_type = bytes[133];
	let poke_star_fame = bytes[135];
	let status_condition = bytes[136];
	let current_hp = bytes[142];
	let is_fateful_encounter = util::get_flag(&bytes, 64, 0).map_err(|e| format!("read field 'is_fateful_encounter': {}", e))?;
	let nickname = stringLogic.readGen5StringFromBytes(dataView, 0x48, 12);
	let trainer_name = stringLogic.readGen5StringFromBytes(dataView, 0x68, 8);
	let trainer_gender = util::get_flag(&bytes, 132, 7).map_err(|e| format!("read field 'trainer_gender': {}", e))?;
	let checksum = u16::from_le_bytes(to_sized_array(&bytes[6..8]));
    let mon = PK5 {
        personality_value,
        dex_num,
        held_item_index,
        trainer_id,
        secret_id,
        exp,
        trainer_friendship,
        ability_index,
        language_index,
        evs,
        moves,
        move_pp,
        move_pp_ups,
        ivs,
        is_egg,
        is_nicknamed,
        gender,
        forme_num,
        nature,
        is_ns_pokemon,
        ribbon_bytes,
        game_of_origin,
        egg_location_index,
        met_location_index,
        pokerus_byte,
        ball,
        met_level,
        encounter_type,
        poke_star_fame,
        status_condition,
        current_hp,
        is_fateful_encounter,
        nickname,
        trainer_name,
        trainer_gender,
        checksum,
    };
	return Ok(mon);
  }
}
