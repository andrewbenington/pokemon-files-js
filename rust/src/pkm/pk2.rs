// This file was generated by make generate
use crate::pkm::{util, strings};
use crate::pkm::types::StatsPreSplit;
use crate::pkm::util::to_sized_array;
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct PK2 {
  dex_num: u8,
  held_item_index: u8,
  moves: [u8; 4],
  trainer_id: u16,
  evs_g12: StatsPreSplit,
  dvs: StatsPreSplit,
  move_pp: [u8; 4],
  move_pp_ups: [u8; 4],
  trainer_friendship: u8,
  pokerus_byte: u8,
  met_time_of_day: u8,
  met_level: u8,
  met_location_index: u8,
  level: u8,
  status_condition: u8,
  current_hp: u8,
  trainer_name: String,
  nickname: String,
  trainer_gender: bool,
}

impl PK2 {
  pub fn from_bytes(bytes: Vec<u8>) -> Result<Self, Box<dyn std::error::Error>> {
	let dex_num = bytes[0];
	let held_item_index = bytes[1];
	let moves = [bytes[2], bytes[3], bytes[4], bytes[5]];
	let trainer_id = u16::from_be_bytes(to_sized_array(&bytes[6..8]));
	let evs_g12 = StatsPreSplit::from_bytes_be(to_sized_array(&bytes[11..21]));
	let dvs = StatsPreSplit::from_dv_bytes(to_sized_array(&bytes[21..23]));
	let move_pp = [util::int_from_buffer_bits_be::<u8>(bytes, 23, 0, 6), util::int_from_buffer_bits_be::<u8>(bytes, 24, 6, 6), util::int_from_buffer_bits_be::<u8>(bytes, 25, 12, 6), util::int_from_buffer_bits_be::<u8>(bytes, 26, 18, 6)];
	let move_pp_ups = [util::int_from_buffer_bits_be::<u8>(bytes, 23, 6, 2), util::int_from_buffer_bits_be::<u8>(bytes, 24, 8, 2), util::int_from_buffer_bits_be::<u8>(bytes, 25, 10, 2), util::int_from_buffer_bits_be::<u8>(bytes, 26, 12, 2)];
	let trainer_friendship = bytes[27];
	let pokerus_byte = bytes[28];
	let met_time_of_day = byteLogic.uIntFromBufferBits(dataView, 0x1d, 6, 2, false);
	let met_level = byteLogic.uIntFromBufferBits(dataView, 0x1d, 0, 6, false);
	let met_location_index = byteLogic.uIntFromBufferBits(dataView, 0x1e, 0, 7, false);
	let level = bytes[31];
	let status_condition = bytes[32];
	let current_hp = bytes[34];
	let trainer_name = stringLogic.readGameBoyStringFromBytes(dataView, 0x30, 8);
	let nickname = stringLogic.readGameBoyStringFromBytes(dataView, 0x3b, 11);
	let trainer_gender = util::get_flag(&bytes, 30, 7).map_err(|e| format!("read field 'trainer_gender': {}", e))?;
    let mon = PK2 {
        dex_num,
        held_item_index,
        moves,
        trainer_id,
        evs_g12,
        dvs,
        move_pp,
        move_pp_ups,
        trainer_friendship,
        pokerus_byte,
        met_time_of_day,
        met_level,
        met_location_index,
        level,
        status_condition,
        current_hp,
        trainer_name,
        nickname,
        trainer_gender,
    };
	return Ok(mon);
  }
}
