// This file was generated by make generate
use crate::pkm::{util, strings};
use crate::pkm::types::Stats;
use crate::pkm::util::to_sized_array;
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct PA8 {
  encryption_constant: u32,
  sanity: u16,
  checksum: u16,
  dex_num: u16,
  held_item_index: u16,
  trainer_id: u16,
  secret_id: u16,
  exp: u32,
  ability_index: u16,
  ability_num: u8,
  personality_value: u32,
  nature: u8,
  stat_nature: u8,
  is_fateful_encounter: bool,
  flag2_la: bool,
  gender: u8,
  forme_num: u16,
  evs: Stats,
  pokerus_byte: u8,
  ribbon_bytes: [u8; 8],
  contest_memory_count: u8,
  battle_memory_count: u8,
  alpha_move: u16,
  sociability: u32,
  height: u8,
  weight: u8,
  scale: u8,
  moves: [u16; 4],
  move_pp: [u8; 4],
  nickname: String,
  move_pp_ups: [u8; 4],
  relearn_moves: [u16; 4],
  current_hp: u16,
  ivs: Stats,
  is_egg: bool,
  is_nicknamed: bool,
  dynamax_level: u8,
  status_condition: u32,
  unknown_a0: u32,
  gvs: Stats,
  handler_name: String,
  handler_gender: bool,
  handler_language: u8,
  is_current_handler: bool,
  handler_id: u16,
  handler_friendship: u8,
  fullness: u8,
  enjoyment: u8,
  game_of_origin: u8,
  game_of_origin_battle: u8,
  region: u8,
  console_region: u8,
  language_index: u8,
  unknown_f3: u8,
  form_argument: u32,
  affixed_ribbon: u8,
  trainer_name: String,
  trainer_friendship: u8,
  ball: u8,
  egg_location_index: u16,
  met_location_index: u16,
  met_level: u8,
  hyper_training: Stats,
  move_flags_la: [u8; 14],
  home_tracker: [u8; 8],
  tutor_flags_la: [u8; 8],
  master_flags_la: [u8; 8],
  favorite: bool,
  can_gigantamax: bool,
  is_alpha: bool,
  is_noble: bool,
  trainer_gender: bool,
}

impl PA8 {
  pub fn from_bytes(bytes: Vec<u8>) -> Result<Self, Box<dyn std::error::Error>> {
	let encryption_constant = u32::from_le_bytes(to_sized_array(&bytes[0..4]));
	let sanity = u16::from_le_bytes(to_sized_array(&bytes[4..6]));
	let checksum = u16::from_le_bytes(to_sized_array(&bytes[6..8]));
	let dex_num = u16::from_le_bytes(to_sized_array(&bytes[8..10]));
	let held_item_index = u16::from_le_bytes(to_sized_array(&bytes[10..12]));
	let trainer_id = u16::from_le_bytes(to_sized_array(&bytes[12..14]));
	let secret_id = u16::from_le_bytes(to_sized_array(&bytes[14..16]));
	let exp = u32::from_le_bytes(to_sized_array(&bytes[16..20]));
	let ability_index = u16::from_le_bytes(to_sized_array(&bytes[20..22]));
	let ability_num = bytes[22];
	let personality_value = u32::from_le_bytes(to_sized_array(&bytes[28..32]));
	let nature = bytes[32];
	let stat_nature = bytes[33];
	let is_fateful_encounter = util::get_flag(&bytes, 34, 0).map_err(|e| format!("read field 'is_fateful_encounter': {}", e))?;
	let flag2_la = util::get_flag(&bytes, 34, 1).map_err(|e| format!("read field 'flag2_la': {}", e))?;
	let gender = bytes[34];
	let forme_num = u16::from_le_bytes(to_sized_array(&bytes[36..38]));
	let evs = Stats::from_bytes(to_sized_array(&bytes[38..44]));
	let pokerus_byte = bytes[50];
	let ribbon_bytes = to_sized_array(&bytes[52..60]);
	let contest_memory_count = bytes[60];
	let battle_memory_count = bytes[61];
	let alpha_move = u16::from_le_bytes(to_sized_array(&bytes[62..64]));
	let sociability = u32::from_le_bytes(to_sized_array(&bytes[72..76]));
	let height = bytes[80];
	let weight = bytes[81];
	let scale = bytes[82];
	let moves = [u16::from_le_bytes(to_sized_array(&bytes[84..86])), u16::from_le_bytes(to_sized_array(&bytes[86..88])), u16::from_le_bytes(to_sized_array(&bytes[88..90])), u16::from_le_bytes(to_sized_array(&bytes[90..92]))];
	let move_pp = [bytes[92], bytes[93], bytes[94], bytes[95]];
	let nickname = strings::utf16_be_from_bytes(bytes[96..120].to_vec()).map_err(|e| format!("read field 'nickname': {}", e))?;
	let move_pp_ups = [bytes[134], bytes[135], bytes[136], bytes[137]];
	let relearn_moves = [u16::from_le_bytes(to_sized_array(&bytes[138..140])), u16::from_le_bytes(to_sized_array(&bytes[140..142])), u16::from_le_bytes(to_sized_array(&bytes[142..144])), u16::from_le_bytes(to_sized_array(&bytes[144..146]))];
	let current_hp = u16::from_le_bytes(to_sized_array(&bytes[146..148]));
	let ivs = Stats::from_bytes(to_sized_array(&bytes[148..154]));
	let is_egg = util::get_flag(&bytes, 148, 30).map_err(|e| format!("read field 'is_egg': {}", e))?;
	let is_nicknamed = util::get_flag(&bytes, 148, 31).map_err(|e| format!("read field 'is_nicknamed': {}", e))?;
	let dynamax_level = bytes[152];
	let status_condition = u32::from_le_bytes(to_sized_array(&bytes[156..160]));
	let unknown_a0 = u32::from_le_bytes(to_sized_array(&bytes[160..164]));
	let gvs = Stats::from_bytes(to_sized_array(&bytes[164..170]));
	let handler_name = strings::utf16_be_from_bytes(bytes[184..208].to_vec()).map_err(|e| format!("read field 'handler_name': {}", e))?;
	let handler_gender = util::get_flag(&bytes, 210, 0).map_err(|e| format!("read field 'handler_gender': {}", e))?;
	let handler_language = bytes[211];
	let is_current_handler = util::get_flag(&bytes, 212, 0).map_err(|e| format!("read field 'is_current_handler': {}", e))?;
	let handler_id = u16::from_le_bytes(to_sized_array(&bytes[214..216]));
	let handler_friendship = bytes[216];
	let fullness = bytes[236];
	let enjoyment = bytes[237];
	let game_of_origin = bytes[238];
	let game_of_origin_battle = bytes[239];
	let region = bytes[240];
	let console_region = bytes[240];
	let language_index = bytes[242];
	let unknown_f3 = bytes[243];
	let form_argument = u32::from_le_bytes(to_sized_array(&bytes[244..248]));
	let affixed_ribbon = bytes[248];
	let trainer_name = strings::utf16_be_from_bytes(bytes[272..296].to_vec()).map_err(|e| format!("read field 'trainer_name': {}", e))?;
	let trainer_friendship = bytes[298];
	let ball = bytes[311];
	let egg_location_index = u16::from_le_bytes(to_sized_array(&bytes[314..316]));
	let met_location_index = u16::from_le_bytes(to_sized_array(&bytes[314..316]));
	let met_level = bytes[317];
	let hyper_training = Stats::from_hyper_train_bytes(to_sized_array(&bytes[318..324]));
	let move_flags_la = to_sized_array(&bytes[319..333]);
	let home_tracker = to_sized_array(&bytes[333..341]);
	let tutor_flags_la = to_sized_array(&bytes[341..349]);
	let master_flags_la = to_sized_array(&bytes[349..357]);
	let favorite = util::get_flag(&bytes, 22, 4).map_err(|e| format!("read field 'favorite': {}", e))?;
	let can_gigantamax = util::get_flag(&bytes, 22, 5).map_err(|e| format!("read field 'can_gigantamax': {}", e))?;
	let is_alpha = util::get_flag(&bytes, 22, 6).map_err(|e| format!("read field 'is_alpha': {}", e))?;
	let is_noble = util::get_flag(&bytes, 22, 7).map_err(|e| format!("read field 'is_noble': {}", e))?;
	let trainer_gender = util::get_flag(&bytes, 317, 7).map_err(|e| format!("read field 'trainer_gender': {}", e))?;
    let mon = PA8 {
        encryption_constant,
        sanity,
        checksum,
        dex_num,
        held_item_index,
        trainer_id,
        secret_id,
        exp,
        ability_index,
        ability_num,
        personality_value,
        nature,
        stat_nature,
        is_fateful_encounter,
        flag2_la,
        gender,
        forme_num,
        evs,
        pokerus_byte,
        ribbon_bytes,
        contest_memory_count,
        battle_memory_count,
        alpha_move,
        sociability,
        height,
        weight,
        scale,
        moves,
        move_pp,
        nickname,
        move_pp_ups,
        relearn_moves,
        current_hp,
        ivs,
        is_egg,
        is_nicknamed,
        dynamax_level,
        status_condition,
        unknown_a0,
        gvs,
        handler_name,
        handler_gender,
        handler_language,
        is_current_handler,
        handler_id,
        handler_friendship,
        fullness,
        enjoyment,
        game_of_origin,
        game_of_origin_battle,
        region,
        console_region,
        language_index,
        unknown_f3,
        form_argument,
        affixed_ribbon,
        trainer_name,
        trainer_friendship,
        ball,
        egg_location_index,
        met_location_index,
        met_level,
        hyper_training,
        move_flags_la,
        home_tracker,
        tutor_flags_la,
        master_flags_la,
        favorite,
        can_gigantamax,
        is_alpha,
        is_noble,
        trainer_gender,
    };
	return Ok(mon);
  }
}
