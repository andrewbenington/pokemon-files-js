// This file was generated by make generate
use crate::pkm::{util, strings};
use crate::pkm::types::{Stats, ContestStats, HyperTraining, Gender};
use crate::pkm::util::to_sized_array;
use serde::Serialize;
use super::pkm::Pkm;

#[derive(Debug, Default, Serialize)]
pub struct PA8 {
  pub encryption_constant: u32,
  pub sanity: u16,
  pub checksum: u16,
  pub dex_num: u16,
  pub held_item_index: u16,
  pub trainer_id: u16,
  pub secret_id: u16,
  pub exp: u32,
  pub ability_index: u16,
  pub ability_num: u8,
  pub personality_value: u32,
  pub nature: u8,
  pub stat_nature: u8,
  pub is_fateful_encounter: bool,
  pub flag2_la: bool,
  pub gender: Gender,
  pub forme_num: u16,
  pub evs: Stats,
  pub contest: ContestStats,
  pub pokerus_byte: u8,
  pub ribbon_bytes: [u8; 8],
  pub contest_memory_count: u8,
  pub battle_memory_count: u8,
  pub alpha_move: u16,
  pub sociability: u32,
  pub height: u8,
  pub weight: u8,
  pub scale: u8,
  pub moves: [u16; 4],
  pub move_pp: [u8; 4],
  pub nickname: String,
  pub move_pp_ups: [u8; 4],
  pub relearn_moves: [u16; 4],
  pub current_hp: u16,
  pub ivs: Stats,
  pub is_egg: bool,
  pub is_nicknamed: bool,
  pub dynamax_level: u8,
  pub status_condition: u32,
  pub unknown_a0: u32,
  pub gvs: Stats,
  pub handler_name: String,
  pub handler_gender: bool,
  pub handler_language: u8,
  pub is_current_handler: bool,
  pub handler_id: u16,
  pub handler_friendship: u8,
  pub fullness: u8,
  pub enjoyment: u8,
  pub game_of_origin: u8,
  pub game_of_origin_battle: u8,
  pub region: u8,
  pub console_region: u8,
  pub language_index: u8,
  pub unknown_f3: u8,
  pub form_argument: u32,
  pub affixed_ribbon: u8,
  pub trainer_name: String,
  pub trainer_friendship: u8,
  pub ball: u8,
  pub egg_location_index: u16,
  pub met_location_index: u16,
  pub met_level: u8,
  pub hyper_training: HyperTraining,
  pub move_flags_la: [u8; 14],
  pub home_tracker: [u8; 8],
  pub tutor_flags_la: [u8; 8],
  pub master_flags_la: [u8; 8],
  pub favorite: bool,
  pub can_gigantamax: bool,
  pub is_alpha: bool,
  pub is_noble: bool,
  pub height_absolute_bytes: [u8; 4],
  pub weight_absolute_bytes: [u8; 4],
  pub trainer_gender: Gender,
}

impl Pkm<360, 360> for PA8 {
    const BOX_SIZE: usize = 360;
    const PARTY_SIZE: usize = 360;

	fn from_bytes(bytes: &[u8]) -> Result<Self, String> {
		let size = bytes.len();
		if size < 360 {
			return Err(format!(
				"byte array is too short for PA8 format (received {size}, expected >= 360)"
			));
		}
		let mon = PA8 {
			encryption_constant: u32::from_le_bytes(to_sized_array(&bytes[0..4])),
			sanity: u16::from_le_bytes(to_sized_array(&bytes[4..6])),
			checksum: u16::from_le_bytes(to_sized_array(&bytes[6..8])),
			dex_num: u16::from_le_bytes(to_sized_array(&bytes[8..10])),
			held_item_index: u16::from_le_bytes(to_sized_array(&bytes[10..12])),
			trainer_id: u16::from_le_bytes(to_sized_array(&bytes[12..14])),
			secret_id: u16::from_le_bytes(to_sized_array(&bytes[14..16])),
			exp: u32::from_le_bytes(to_sized_array(&bytes[16..20])),
			ability_index: u16::from_le_bytes(to_sized_array(&bytes[20..22])),
			ability_num: bytes[22],
			personality_value: u32::from_le_bytes(to_sized_array(&bytes[28..32])),
			nature: bytes[32],
			stat_nature: bytes[33],
			is_fateful_encounter: util::get_flag(bytes, 34, 0),
			flag2_la: util::get_flag(bytes, 34, 1),
			gender: bytes[34].into(),
			forme_num: u16::from_le_bytes(to_sized_array(&bytes[36..38])),
			evs: Stats::from_bytes(to_sized_array(&bytes[38..44])),
			contest: ContestStats::from_bytes(to_sized_array(&bytes[44..50])),
			pokerus_byte: bytes[50],
			ribbon_bytes: to_sized_array(&bytes[52..60]),
			contest_memory_count: bytes[60],
			battle_memory_count: bytes[61],
			alpha_move: u16::from_le_bytes(to_sized_array(&bytes[62..64])),
			sociability: u32::from_le_bytes(to_sized_array(&bytes[72..76])),
			height: bytes[80],
			weight: bytes[81],
			scale: bytes[82],
			moves: [u16::from_le_bytes(to_sized_array(&bytes[84..86])), u16::from_le_bytes(to_sized_array(&bytes[86..88])), u16::from_le_bytes(to_sized_array(&bytes[88..90])), u16::from_le_bytes(to_sized_array(&bytes[90..92]))],
			move_pp: [bytes[92], bytes[93], bytes[94], bytes[95]],
			nickname: strings::utf16::from_be_bytes(bytes[96..120].to_vec()),
			move_pp_ups: [bytes[134], bytes[135], bytes[136], bytes[137]],
			relearn_moves: [u16::from_le_bytes(to_sized_array(&bytes[138..140])), u16::from_le_bytes(to_sized_array(&bytes[140..142])), u16::from_le_bytes(to_sized_array(&bytes[142..144])), u16::from_le_bytes(to_sized_array(&bytes[144..146]))],
			current_hp: u16::from_le_bytes(to_sized_array(&bytes[146..148])),
			ivs: Stats::from_30_bits(to_sized_array(&bytes[148..152])),
			is_egg: util::get_flag(bytes, 148, 30),
			is_nicknamed: util::get_flag(bytes, 148, 31),
			dynamax_level: bytes[152],
			status_condition: u32::from_le_bytes(to_sized_array(&bytes[156..160])),
			unknown_a0: u32::from_le_bytes(to_sized_array(&bytes[160..164])),
			gvs: Stats::from_bytes(to_sized_array(&bytes[164..170])),
			handler_name: strings::utf16::from_be_bytes(bytes[184..208].to_vec()),
			handler_gender: util::get_flag(bytes, 210, 0),
			handler_language: bytes[211],
			is_current_handler: util::get_flag(bytes, 212, 0),
			handler_id: u16::from_le_bytes(to_sized_array(&bytes[214..216])),
			handler_friendship: bytes[216],
			fullness: bytes[236],
			enjoyment: bytes[237],
			game_of_origin: bytes[238],
			game_of_origin_battle: bytes[239],
			region: bytes[240],
			console_region: bytes[240],
			language_index: bytes[242],
			unknown_f3: bytes[243],
			form_argument: u32::from_le_bytes(to_sized_array(&bytes[244..248])),
			affixed_ribbon: bytes[248],
			trainer_name: strings::utf16::from_be_bytes(bytes[272..296].to_vec()),
			trainer_friendship: bytes[298],
			ball: bytes[311],
			egg_location_index: u16::from_le_bytes(to_sized_array(&bytes[314..316])),
			met_location_index: u16::from_le_bytes(to_sized_array(&bytes[314..316])),
			met_level: util::int_from_buffer_bits_le::<u8>(bytes, 317, 0, 7).map_err(|e| format!("read field 'met_level': {e}"))?,
			hyper_training: HyperTraining::from_byte(bytes[318]),
			move_flags_la: to_sized_array(&bytes[319..333]),
			home_tracker: to_sized_array(&bytes[333..341]),
			tutor_flags_la: to_sized_array(&bytes[341..349]),
			master_flags_la: to_sized_array(&bytes[349..357]),
			favorite: util::get_flag(bytes, 22, 4),
			can_gigantamax: util::get_flag(bytes, 22, 5),
			is_alpha: util::get_flag(bytes, 22, 6),
			is_noble: util::get_flag(bytes, 22, 7),
			height_absolute_bytes: to_sized_array(&bytes[172..176]),
			weight_absolute_bytes: to_sized_array(&bytes[176..180]),
			trainer_gender: util::get_flag(bytes, 317, 7).into(),
		};
		Ok(mon)
	}
	
	fn write_bytes(&self, bytes: &mut [u8; 360]) {
		
				bytes[0..4].copy_from_slice(&self.encryption_constant.to_le_bytes());
				bytes[4..6].copy_from_slice(&self.sanity.to_le_bytes());
				bytes[6..8].copy_from_slice(&self.checksum.to_le_bytes());
				bytes[8..10].copy_from_slice(&self.dex_num.to_le_bytes());
				bytes[10..12].copy_from_slice(&self.held_item_index.to_le_bytes());
				bytes[12..14].copy_from_slice(&self.trainer_id.to_le_bytes());
				bytes[14..16].copy_from_slice(&self.secret_id.to_le_bytes());
				bytes[16..20].copy_from_slice(&self.exp.to_le_bytes());
				bytes[20..22].copy_from_slice(&self.ability_index.to_le_bytes());
				bytes[22] = self.ability_num;
				bytes[28..32].copy_from_slice(&self.personality_value.to_le_bytes());
				bytes[32] = self.nature;
				bytes[33] = self.stat_nature;
				
				
				bytes[34] = self.gender.into();
				bytes[36..38].copy_from_slice(&self.forme_num.to_le_bytes());
				bytes[38..44].copy_from_slice(&self.evs.to_bytes());
				bytes[44..50].copy_from_slice(&self.contest.to_bytes());
				bytes[50] = self.pokerus_byte;
				
				bytes[60] = self.contest_memory_count;
				bytes[61] = self.battle_memory_count;
				bytes[62..64].copy_from_slice(&self.alpha_move.to_le_bytes());
				bytes[72..76].copy_from_slice(&self.sociability.to_le_bytes());
				bytes[80] = self.height;
				bytes[81] = self.weight;
				bytes[82] = self.scale;
				
				
				bytes[96..108].copy_from_slice(&strings::utf16::to_be_bytes(&self.nickname));
				
				
				bytes[146..148].copy_from_slice(&self.current_hp.to_le_bytes());
				
				
				
				bytes[152] = self.dynamax_level;
				bytes[156..160].copy_from_slice(&self.status_condition.to_le_bytes());
				bytes[160..164].copy_from_slice(&self.unknown_a0.to_le_bytes());
				bytes[164..170].copy_from_slice(&self.gvs.to_bytes());
				bytes[184..196].copy_from_slice(&strings::utf16::to_be_bytes(&self.handler_name));
				
				bytes[211] = self.handler_language;
				
				bytes[214..216].copy_from_slice(&self.handler_id.to_le_bytes());
				bytes[216] = self.handler_friendship;
				bytes[236] = self.fullness;
				bytes[237] = self.enjoyment;
				bytes[238] = self.game_of_origin;
				bytes[239] = self.game_of_origin_battle;
				bytes[240] = self.region;
				bytes[240] = self.console_region;
				bytes[242] = self.language_index;
				bytes[243] = self.unknown_f3;
				bytes[244..248].copy_from_slice(&self.form_argument.to_le_bytes());
				
				bytes[272..284].copy_from_slice(&strings::utf16::to_be_bytes(&self.trainer_name));
				bytes[298] = self.trainer_friendship;
				bytes[311] = self.ball;
				bytes[314..316].copy_from_slice(&self.egg_location_index.to_le_bytes());
				bytes[314..316].copy_from_slice(&self.met_location_index.to_le_bytes());
				bytes[317] = self.met_level;
				bytes[318] = self.hyper_training.to_byte();
				
				
				
				
				
				
				
				
				
				
				
	}
	
  	fn to_box_bytes(&self) -> [u8; 360] {
        let mut bytes = [0; 360];
		self.write_bytes(&mut bytes);

        bytes
	}
	
  	fn to_party_bytes(&self) -> [u8; 360] {
        let mut bytes = [0; 360];
		let box_slice: &mut [u8; 360] = bytes[0..360].as_mut().try_into().unwrap();
		self.write_bytes(box_slice);

		
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

        bytes
	}
}
