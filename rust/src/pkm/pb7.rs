// This file was generated by make generate
use crate::pkm::{util, strings};
use crate::pkm::types::Stats;
use crate::pkm::util::to_sized_array;
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct PB7 {
  encryption_constant: u32,
  dex_num: u16,
  held_item_index: u16,
  trainer_id: u16,
  secret_id: u16,
  exp: u32,
  ability_index: u8,
  ability_num: u8,
  favorite: bool,
  personality_value: u32,
  nature: u8,
  is_fateful_encounter: bool,
  gender: u8,
  forme_num: u8,
  evs: Stats,
  avs: Stats,
  resort_event_status: u8,
  pokerus_byte: u8,
  height: u8,
  weight: u8,
  form_argument: u32,
  nickname: String,
  moves: [u16; 4],
  move_pp: [u8; 4],
  move_pp_ups: [u8; 4],
  relearn_moves: [u16; 4],
  ivs: Stats,
  is_egg: bool,
  is_nicknamed: bool,
  handler_name: String,
  handler_gender: bool,
  is_current_handler: bool,
  handler_friendship: u8,
  field_event_fatigue1: u8,
  field_event_fatigue2: u8,
  fullness: u8,
  enjoyment: u8,
  trainer_name: String,
  trainer_friendship: u8,
  egg_location_index: u16,
  met_location_index: u16,
  ball: u8,
  met_level: u8,
  hyper_training: Stats,
  game_of_origin: u8,
  language_index: u8,
  status_condition: u8,
  current_hp: u8,
  trainer_gender: bool,
}

impl PB7 {
  pub fn from_bytes(bytes: Vec<u8>) -> Result<Self, Box<dyn std::error::Error>> {
	let encryption_constant = u32::from_le_bytes(to_sized_array(&bytes[0..4]));
	let dex_num = u16::from_le_bytes(to_sized_array(&bytes[8..10]));
	let held_item_index = u16::from_le_bytes(to_sized_array(&bytes[10..12]));
	let trainer_id = u16::from_le_bytes(to_sized_array(&bytes[12..14]));
	let secret_id = u16::from_le_bytes(to_sized_array(&bytes[14..16]));
	let exp = u32::from_le_bytes(to_sized_array(&bytes[16..20]));
	let ability_index = bytes[20];
	let ability_num = bytes[21];
	let favorite = util::get_flag(&bytes, 21, 3).map_err(|e| format!("read field 'favorite': {}", e))?;
	let personality_value = u32::from_le_bytes(to_sized_array(&bytes[24..28]));
	let nature = bytes[28];
	let is_fateful_encounter = util::get_flag(&bytes, 29, 0).map_err(|e| format!("read field 'is_fateful_encounter': {}", e))?;
	let gender = byteLogic.uIntFromBufferBits(dataView, 0x1d, 1, 2, true);
	let forme_num = byteLogic.uIntFromBufferBits(dataView, 0x1d, 3, 5, true);
	let evs = Stats::from_bytes(to_sized_array(&bytes[30..36]));
	let avs = Stats::from_bytes(to_sized_array(&bytes[36..42]));
	let resort_event_status = bytes[42];
	let pokerus_byte = bytes[43];
	let height = bytes[58];
	let weight = bytes[59];
	let form_argument = u32::from_le_bytes(to_sized_array(&bytes[60..64]));
	let nickname = strings::utf16_be_from_bytes(bytes[64..88].to_vec()).map_err(|e| format!("read field 'nickname': {}", e))?;
	let moves = [u16::from_le_bytes(to_sized_array(&bytes[90..92])), u16::from_le_bytes(to_sized_array(&bytes[92..94])), u16::from_le_bytes(to_sized_array(&bytes[94..96])), u16::from_le_bytes(to_sized_array(&bytes[96..98]))];
	let move_pp = [bytes[98], bytes[99], bytes[100], bytes[101]];
	let move_pp_ups = [bytes[102], bytes[103], bytes[104], bytes[105]];
	let relearn_moves = [u16::from_le_bytes(to_sized_array(&bytes[106..108])), u16::from_le_bytes(to_sized_array(&bytes[108..110])), u16::from_le_bytes(to_sized_array(&bytes[110..112])), u16::from_le_bytes(to_sized_array(&bytes[112..114]))];
	let ivs = Stats::from_bytes(to_sized_array(&bytes[116..122]));
	let is_egg = util::get_flag(&bytes, 116, 30).map_err(|e| format!("read field 'is_egg': {}", e))?;
	let is_nicknamed = util::get_flag(&bytes, 116, 31).map_err(|e| format!("read field 'is_nicknamed': {}", e))?;
	let handler_name = strings::utf16_be_from_bytes(bytes[120..144].to_vec()).map_err(|e| format!("read field 'handler_name': {}", e))?;
	let handler_gender = util::get_flag(&bytes, 146, 0).map_err(|e| format!("read field 'handler_gender': {}", e))?;
	let is_current_handler = util::get_flag(&bytes, 147, 0).map_err(|e| format!("read field 'is_current_handler': {}", e))?;
	let handler_friendship = bytes[162];
	let field_event_fatigue1 = bytes[172];
	let field_event_fatigue2 = bytes[173];
	let fullness = bytes[174];
	let enjoyment = bytes[175];
	let trainer_name = strings::utf16_be_from_bytes(bytes[176..200].to_vec()).map_err(|e| format!("read field 'trainer_name': {}", e))?;
	let trainer_friendship = bytes[202];
	let egg_location_index = u16::from_le_bytes(to_sized_array(&bytes[216..218]));
	let met_location_index = u16::from_le_bytes(to_sized_array(&bytes[218..220]));
	let ball = bytes[220];
	let met_level = bytes[221];
	let hyper_training = Stats::from_hyper_train_bytes(to_sized_array(&bytes[222..228]));
	let game_of_origin = bytes[223];
	let language_index = bytes[227];
	let status_condition = bytes[232];
	let current_hp = bytes[240];
	let trainer_gender = util::get_flag(&bytes, 221, 7).map_err(|e| format!("read field 'trainer_gender': {}", e))?;
    let mon = PB7 {
        encryption_constant,
        dex_num,
        held_item_index,
        trainer_id,
        secret_id,
        exp,
        ability_index,
        ability_num,
        favorite,
        personality_value,
        nature,
        is_fateful_encounter,
        gender,
        forme_num,
        evs,
        avs,
        resort_event_status,
        pokerus_byte,
        height,
        weight,
        form_argument,
        nickname,
        moves,
        move_pp,
        move_pp_ups,
        relearn_moves,
        ivs,
        is_egg,
        is_nicknamed,
        handler_name,
        handler_gender,
        is_current_handler,
        handler_friendship,
        field_event_fatigue1,
        field_event_fatigue2,
        fullness,
        enjoyment,
        trainer_name,
        trainer_friendship,
        egg_location_index,
        met_location_index,
        ball,
        met_level,
        hyper_training,
        game_of_origin,
        language_index,
        status_condition,
        current_hp,
        trainer_gender,
    };
	return Ok(mon);
  }
}
