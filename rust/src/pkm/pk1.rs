// This file was generated by make generate
use crate::pkm::{util, strings};
use crate::pkm::types::StatsPreSplit;
use crate::pkm::util::to_sized_array;
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct PK1 {
  dex_num: u8,
  current_hp: u16,
  level: u8,
  status_condition: u8,
  type1: u8,
  type2: u8,
  held_item_index: u8,
  moves: [u8; 4],
  trainer_id: u16,
  evs_g12: StatsPreSplit,
  dvs: StatsPreSplit,
  move_pp: [u8; 4],
  move_pp_ups: [u8; 4],
  trainer_name: String,
  nickname: String,
}

impl PK1 {
  pub fn from_bytes(bytes: Vec<u8>) -> Result<Self, Box<dyn std::error::Error>> {
	let dex_num = bytes[0];
	let current_hp = u16::from_be_bytes(to_sized_array(&bytes[1..3]));
	let level = bytes[3];
	let status_condition = bytes[4];
	let type1 = bytes[5];
	let type2 = bytes[6];
	let held_item_index = bytes[7];
	let moves = [bytes[8], bytes[9], bytes[10], bytes[11]];
	let trainer_id = u16::from_be_bytes(to_sized_array(&bytes[12..14]));
	let evs_g12 = StatsPreSplit::from_bytes_be(to_sized_array(&bytes[17..27]));
	let dvs = StatsPreSplit::from_dv_bytes(to_sized_array(&bytes[27..29]));
	let move_pp = [util::int_from_buffer_bits_be::<u8>(bytes, 29, 0, 6), util::int_from_buffer_bits_be::<u8>(bytes, 30, 6, 6), util::int_from_buffer_bits_be::<u8>(bytes, 31, 12, 6), util::int_from_buffer_bits_be::<u8>(bytes, 32, 18, 6)];
	let move_pp_ups = [util::int_from_buffer_bits_be::<u8>(bytes, 29, 6, 2), util::int_from_buffer_bits_be::<u8>(bytes, 30, 8, 2), util::int_from_buffer_bits_be::<u8>(bytes, 31, 10, 2), util::int_from_buffer_bits_be::<u8>(bytes, 32, 12, 2)];
	let trainer_name = stringLogic.readGameBoyStringFromBytes(dataView, 0x2c, 8);
	let nickname = stringLogic.readGameBoyStringFromBytes(dataView, 0x37, 11);
    let mon = PK1 {
        dex_num,
        current_hp,
        level,
        status_condition,
        type1,
        type2,
        held_item_index,
        moves,
        trainer_id,
        evs_g12,
        dvs,
        move_pp,
        move_pp_ups,
        trainer_name,
        nickname,
    };
	return Ok(mon);
  }
}
