// This file was generated by make generate
use super::pkm::Pkm;
use crate::pkm::strings::Gen4String;
use crate::pkm::types::{ContestStats, FlagSet, Gender, Stats};
use crate::pkm::util;
use crate::pkm::util::to_sized_array;
use serde::Serialize;

#[derive(Debug, Default, Serialize)]
pub struct PK4 {
    pub personality_value: u32,
    pub dex_num: u16,
    pub held_item_index: u16,
    pub trainer_id: u16,
    pub secret_id: u16,
    pub exp: u32,
    pub trainer_friendship: u8,
    pub ability_index: u8,
    pub language_index: u8,
    pub evs: Stats,
    pub contest: ContestStats,
    pub moves: [u16; 4],
    pub move_pp: [u8; 4],
    pub move_pp_ups: [u8; 4],
    pub ivs: Stats,
    pub is_egg: bool,
    pub is_nicknamed: bool,
    pub forme_num: u8,
    pub shiny_leaves: u8,
    pub ribbon_bytes: FlagSet<4>,
    pub game_of_origin: u8,
    pub pokerus_byte: u8,
    pub ball: u8,
    pub ball_dp_pt: u8,
    pub ball_hgss: u8,
    pub met_level: u8,
    pub encounter_type: u8,
    pub performance: u8,
    pub status_condition: u8,
    pub current_hp: u8,
    pub egg_location_index_dp: u16,
    pub met_location_index_dp: u16,
    pub egg_location_index_pt_hgss: u16,
    pub met_location_index_pt_hgss: u16,
    pub nickname: Gen4String<24>,
    pub trainer_name: Gen4String<16>,
    pub trainer_gender: Gender,
    pub is_fateful_encounter: bool,
    pub checksum: u16,
}

impl Pkm<136, 236> for PK4 {
    const BOX_SIZE: usize = 136;
    const PARTY_SIZE: usize = 236;

    fn from_bytes(bytes: &[u8]) -> Result<Self, String> {
        let size = bytes.len();
        if size < 136 {
            return Err(format!(
                "byte array is too short for PK4 format (received {size}, expected >= 136)"
            ));
        }
        let mon = PK4 {
            personality_value: u32::from_le_bytes(to_sized_array(&bytes[0..4])),
            dex_num: u16::from_le_bytes(to_sized_array(&bytes[8..10])),
            held_item_index: u16::from_le_bytes(to_sized_array(&bytes[10..12])),
            trainer_id: u16::from_le_bytes(to_sized_array(&bytes[12..14])),
            secret_id: u16::from_le_bytes(to_sized_array(&bytes[14..16])),
            exp: u32::from_le_bytes(to_sized_array(&bytes[16..20])),
            trainer_friendship: bytes[20],
            ability_index: bytes[21],
            language_index: bytes[23],
            evs: Stats::from_bytes(to_sized_array(&bytes[24..30])),
            contest: ContestStats::from_bytes(to_sized_array(&bytes[30..36])),
            moves: [
                u16::from_le_bytes(to_sized_array(&bytes[40..42])),
                u16::from_le_bytes(to_sized_array(&bytes[42..44])),
                u16::from_le_bytes(to_sized_array(&bytes[44..46])),
                u16::from_le_bytes(to_sized_array(&bytes[46..48])),
            ],
            move_pp: [bytes[48], bytes[49], bytes[50], bytes[51]],
            move_pp_ups: [bytes[52], bytes[53], bytes[54], bytes[55]],
            ivs: Stats::from_30_bits(to_sized_array(&bytes[56..60])),
            is_egg: util::get_flag(bytes, 56, 30),
            is_nicknamed: util::get_flag(bytes, 56, 31),
            forme_num: util::int_from_buffer_bits_le::<u8>(bytes, 64, 3, 5)
                .map_err(|e| format!("read field 'forme_num': {e}"))?,
            shiny_leaves: bytes[65],
            ribbon_bytes: FlagSet::from_bytes(to_sized_array(&bytes[76..80])),
            game_of_origin: bytes[95],
            pokerus_byte: bytes[130],
            ball: bytes[131],
            ball_dp_pt: bytes[131],
            ball_hgss: bytes[134],
            met_level: bytes[132],
            encounter_type: bytes[133],
            performance: bytes[135],
            status_condition: if bytes.len() > 236 { bytes[136] } else { 0 },
            current_hp: if bytes.len() > 236 { bytes[142] } else { 0 },
            egg_location_index_dp: u16::from_le_bytes(to_sized_array(&bytes[126..128])),
            met_location_index_dp: u16::from_le_bytes(to_sized_array(&bytes[128..130])),
            egg_location_index_pt_hgss: u16::from_le_bytes(to_sized_array(&bytes[68..70])),
            met_location_index_pt_hgss: u16::from_le_bytes(to_sized_array(&bytes[70..72])),
            nickname: Gen4String::from_bytes(to_sized_array::<[u8; 24], u8>(&bytes[72..96])),
            trainer_name: Gen4String::from_bytes(to_sized_array::<[u8; 16], u8>(&bytes[104..120])),
            trainer_gender: util::get_flag(bytes, 132, 7).into(),
            is_fateful_encounter: util::get_flag(bytes, 64, 0),
            checksum: u16::from_le_bytes(to_sized_array(&bytes[6..8])),
        };
        Ok(mon)
    }

    fn write_bytes(&self, bytes: &mut [u8; 136]) {
        bytes[0..4].copy_from_slice(&self.personality_value.to_le_bytes());
        bytes[8..10].copy_from_slice(&self.dex_num.to_le_bytes());
        bytes[10..12].copy_from_slice(&self.held_item_index.to_le_bytes());
        bytes[12..14].copy_from_slice(&self.trainer_id.to_le_bytes());
        bytes[14..16].copy_from_slice(&self.secret_id.to_le_bytes());
        bytes[16..20].copy_from_slice(&self.exp.to_le_bytes());
        bytes[20] = self.trainer_friendship;
        bytes[21] = self.ability_index;
        bytes[23] = self.language_index;
        bytes[24..30].copy_from_slice(&self.evs.to_bytes());
        bytes[30..36].copy_from_slice(&self.contest.to_bytes());

        bytes[64] = self.forme_num;
        bytes[65] = self.shiny_leaves;

        bytes[95] = self.game_of_origin;
        bytes[130] = self.pokerus_byte;
        bytes[131] = self.ball;
        bytes[131] = self.ball_dp_pt;
        bytes[134] = self.ball_hgss;
        bytes[132] = self.met_level;
        bytes[133] = self.encounter_type;
        bytes[135] = self.performance;

        bytes[126..128].copy_from_slice(&self.egg_location_index_dp.to_le_bytes());
        bytes[128..130].copy_from_slice(&self.met_location_index_dp.to_le_bytes());
        bytes[68..70].copy_from_slice(&self.egg_location_index_pt_hgss.to_le_bytes());
        bytes[70..72].copy_from_slice(&self.met_location_index_pt_hgss.to_le_bytes());
        bytes[72..96].copy_from_slice(self.nickname.bytes().as_ref());
        bytes[104..120].copy_from_slice(self.trainer_name.bytes().as_ref());

        bytes[6..8].copy_from_slice(&self.checksum.to_le_bytes());
    }

    fn to_box_bytes(&self) -> [u8; 136] {
        let mut bytes = [0; 136];
        self.write_bytes(&mut bytes);

        bytes
    }

    fn to_party_bytes(&self) -> [u8; 236] {
        let mut bytes = [0; 236];
        let box_slice: &mut [u8; 136] = bytes[0..136].as_mut().try_into().unwrap();
        self.write_bytes(box_slice);

        bytes[136] = self.status_condition;
        bytes[142] = self.current_hp;

        bytes
    }
}
